Oswald - font-family: 'Oswald', sans-serif;

Noto Serif Ahom - font-family: 'Noto Serif Ahom', serif;

Poppins - font-family: 'Poppins', sans-serif;

const { state, dispatch } = useContext(Store);
  const { cart } = state;


  const addToCartHandler = (product) => {
    const existItem = cart.cartItems.find((x) => x.slug === product.slug);
    const quantity = existItem ? existItem.quantity + 1 : 1;

    dispatch({ type: 'CART_ADD_ITEM', payload: { ...product, quantity } });

    toast.success('Product added to the cart');
  };




import React, { useEffect, useState } from 'react';
import dynamic from 'next/dynamic';
const Layout = dynamic(() => import('../components/Layout'), { ssr: false });
const Poster = dynamic(() => import('../components/Poster'), { ssr: false });
const ProductCategory = dynamic(() => import('../components/ProductCategory'), {
  ssr: false,
});
const Filter = dynamic(() => import('../components/Filter'), { ssr: false });
const SliderShow = dynamic(() => import('../components/Slider'));
import Product from '../models/Product';
import db from '../utils/db';
import HighlightProducts from '../components/HighlightProducts';

export default function Home({ products }) {
  const [loadedProducts, setLoadedProducts] = useState([]);

  useEffect(() => {
    setLoadedProducts(products);
  }, []);

  return (
    <Layout title="Home">
      <Filter></Filter>
      <Poster></Poster>
      <ProductCategory></ProductCategory>
      <SliderShow></SliderShow>
      <HighlightProducts products={loadedProducts}></HighlightProducts>
    </Layout>
  );
}

export async function getServerSideProps(context) {
  await db.connect();
  const products = await Product.find().lean();

  return {
    props: {
      products: products.map(db.convertDocToObj),
    },
  };
}



